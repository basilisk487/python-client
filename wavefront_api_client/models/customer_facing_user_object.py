# coding: utf-8

"""
    Wavefront Public API

    <p>The Wavefront public API enables you to interact with Wavefront servers using standard web service API tools. You can use the API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make API calls outside the Wavefront API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p><p>For legacy versions of the Wavefront API, see the <a href=\"/api-docs/ui/deprecated\">legacy API documentation</a>.</p>  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomerFacingUserObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'groups': 'list[str]',
        'customer': 'str',
        'identifier': 'str',
        'last_successful_login': 'str'
    }

    attribute_map = {
        'id': 'id',
        'groups': 'groups',
        'customer': 'customer',
        'identifier': 'identifier',
        'last_successful_login': 'lastSuccessfulLogin'
    }

    def __init__(self, id=None, groups=None, customer=None, identifier=None, last_successful_login=None):  # noqa: E501
        """CustomerFacingUserObject - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._groups = None
        self._customer = None
        self._identifier = None
        self._last_successful_login = None
        self.discriminator = None

        self.id = id
        if groups is not None:
            self.groups = groups
        self.customer = customer
        self.identifier = identifier
        if last_successful_login is not None:
            self.last_successful_login = last_successful_login

    @property
    def id(self):
        """Gets the id of this CustomerFacingUserObject.  # noqa: E501

        The unique identifier of this user, which should be their valid email address  # noqa: E501

        :return: The id of this CustomerFacingUserObject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomerFacingUserObject.

        The unique identifier of this user, which should be their valid email address  # noqa: E501

        :param id: The id of this CustomerFacingUserObject.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def groups(self):
        """Gets the groups of this CustomerFacingUserObject.  # noqa: E501

        List of permission groups this user has been granted access to  # noqa: E501

        :return: The groups of this CustomerFacingUserObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this CustomerFacingUserObject.

        List of permission groups this user has been granted access to  # noqa: E501

        :param groups: The groups of this CustomerFacingUserObject.  # noqa: E501
        :type: list[str]
        """

        self._groups = groups

    @property
    def customer(self):
        """Gets the customer of this CustomerFacingUserObject.  # noqa: E501

        The id of the customer to which the user belongs  # noqa: E501

        :return: The customer of this CustomerFacingUserObject.  # noqa: E501
        :rtype: str
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this CustomerFacingUserObject.

        The id of the customer to which the user belongs  # noqa: E501

        :param customer: The customer of this CustomerFacingUserObject.  # noqa: E501
        :type: str
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")  # noqa: E501

        self._customer = customer

    @property
    def identifier(self):
        """Gets the identifier of this CustomerFacingUserObject.  # noqa: E501

        The unique identifier of this user, which should be their valid email address  # noqa: E501

        :return: The identifier of this CustomerFacingUserObject.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this CustomerFacingUserObject.

        The unique identifier of this user, which should be their valid email address  # noqa: E501

        :param identifier: The identifier of this CustomerFacingUserObject.  # noqa: E501
        :type: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def last_successful_login(self):
        """Gets the last_successful_login of this CustomerFacingUserObject.  # noqa: E501

        The last time the user logged in  # noqa: E501

        :return: The last_successful_login of this CustomerFacingUserObject.  # noqa: E501
        :rtype: str
        """
        return self._last_successful_login

    @last_successful_login.setter
    def last_successful_login(self, last_successful_login):
        """Sets the last_successful_login of this CustomerFacingUserObject.

        The last time the user logged in  # noqa: E501

        :param last_successful_login: The last_successful_login of this CustomerFacingUserObject.  # noqa: E501
        :type: str
        """

        self._last_successful_login = last_successful_login

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerFacingUserObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
